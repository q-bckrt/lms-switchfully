name: Run Backend Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          #distribution: 'temurin' also possible, version numbers need ot match up
          distribution: 'oracle'
          java-version: '23'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build and run tests
        run: mvn test
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}



  build-and-deploy:
      name: Build and Deploy to Fly.io
      runs-on: ubuntu-latest
      needs: test

      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Set up JDK 23
          uses: actions/setup-java@v4
          with:
            java-version: '23'
            distribution: 'oracle'
  
        - name: Cache Maven dependencies
          uses: actions/cache@v4
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
  
        - name: Build application
          run: mvn clean package -DskipTests
  
        - name: Create optimized Dockerfile
          run: |
            if [ ! -f "Dockerfile" ]; then
              cat > Dockerfile << 'EOF'
            FROM oracle:23-jre
            
            # Create app user
            RUN addgroup -g 1001 -S appgroup && \
                adduser -S appuser -u 1001 -G appgroup
            
            WORKDIR /app
            
            # Copy the jar file
            COPY target/*.jar app.jar
            
            # Change ownership
            RUN chown -R appuser:appgroup /app
            USER appuser
            
            EXPOSE 8080
            
            # Health check
            HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
              CMD curl -f http://localhost:8080/actuator/health || exit 1
            
            CMD ["java", "-XX:+UseContainerSupport", "-XX:MaxRAMPercentage=75.0", "-jar", "app.jar"]
            EOF
            fi
  
        - name: Set up flyctl
          uses: superfly/flyctl-actions/setup-flyctl@master
  
        - name: Ensure required volumes exist
          run: |
            echo "Checking for required volumes..."
            flyctl volumes list --app lms-switchfully | grep tmp || {
              echo "Creating tmp volume..."
              flyctl volumes create tmp --region ams --size 1 --app lms-switchfully --yes
            }
          env:
            FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  
        - name: Deploy to Fly.io
          run: flyctl deploy --remote-only
          env:
            FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  
        - name: Deployment success notification
          if: success()
          run: |
            echo "✅ Backend deployed successfully to Fly.io!"
            echo "🚀 Check your application at: https://your-app-name.fly.dev"
            
        - name: Deployment failure notification
          if: failure()
          run: |
            echo "❌ Deployment failed! Check the logs above for details.
  
  
  
  
  
  
  
